from iqoptionapi.stable_api import IQ_Option
import time, json, threading, requests, random, datetime

# ===== CONFIGURACI√ìN DE CUENTA =====
EMAIL = "jitraders1216@gmail.com"
PASSWORD = "jo121014
"

# ===== DETECTAR AUTOM√ÅTICAMENTE SI ES FIN DE SEMANA =====
hoy = datetime.datetime.today().weekday()
modo_otc = hoy in [5, 6]  # S√°bado o Domingo ‚Üí OTC
PAIRS = ["EURUSD-OTC", "GBPUSD-OTC", "USDJPY-OTC", "AUDUSD-OTC"] if modo_otc else ["EURUSD", "GBPUSD", "USDJPY", "AUDUSD"]

# ===== CONEXI√ìN A IQ OPTION =====
print("üîå Conectando a IQ Option...")
I_want_money = IQ_Option(EMAIL, PASSWORD)
I_want_money.connect()

if I_want_money.check_connect():
    tipo_cuenta = "OTC" if modo_otc else "REAL"
    print(f"‚úÖ Conectado correctamente a IQ Option ({tipo_cuenta})")
else:
    print("‚ùå Error al conectar con IQ Option. Revisa usuario o contrase√±a.")
    exit()

# ===== FUNCI√ìN PARA ENVIAR SE√ëAL AL PANEL =====
def enviar_senal_a_panel(senal):
    try:
        requests.post("http://127.0.0.1:8765/api/signals", json=[senal])
        print(f"üì° Se√±al enviada al panel: {senal['par']} | {senal['tipo']} | Confianza: {senal['confianza']}%")
    except Exception as e:
        print("‚ö†Ô∏è Error enviando se√±al al panel:", e)

# ===== FUNCI√ìN QUE GENERA SE√ëALES SIMULADAS =====
def generar_senal():
    par = random.choice(PAIRS)
    tipo = random.choice(["CALL", "PUT"])
    confianza = random.randint(85, 99)
    estrategias = [
        "Rechazo de Zona Institucional",
        "Cambio de Tendencia + Confirmaci√≥n de Vela",
        "Ruptura de Nivel + Volumen",
        "Pullback + EMA20",
        "Acci√≥n del Precio + Soporte/Resistencia"
    ]
    estrategia = random.choice(estrategias)
    precio = round(random.uniform(1.08500, 1.12500), 5)
    duracion = random.choice(["2", "3", "5"])

    ahora = datetime.datetime.now()
    entrada = ahora.strftime("%H:%M:%S")
    expira = (ahora + datetime.timedelta(minutes=int(duracion))).strftime("%H:%M:%S")

    senal = {
        "par": par,
        "tipo": tipo,
        "precio": precio,
        "entrada": entrada,
        "expira": expira,
        "confianza": confianza,
        "estrategia": estrategia,
        "duracion": duracion + " min",
        "estado": "EN CURSO"
    }

    enviar_senal_a_panel(senal)

# ===== HILO PRINCIPAL QUE ENV√çA SE√ëALES =====
def ciclo_senales():
    while True:
        generar_senal()
        time.sleep(random.randint(40, 70))  # Cada 40 a 70 segundos

# ===== INICIAR PROCESO =====
print("üöÄ Sistema de se√±ales iniciado...")
print(f"Modo actual: {'OTC' if modo_otc else 'REAL'}")
print("Esperando oportunidades de entrada...\n")

threading.Thread(target=ciclo_senales).start()
